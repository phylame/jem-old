/*
 * Copyright 2014-2015 Peng Wan <phylame@163.com>
 *
 * This file is part of Jem.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package pw.phylame.jem.formats.jar;

import pw.phylame.jem.core.Book;
import pw.phylame.jem.core.Jem;
import pw.phylame.jem.core.Maker;
import pw.phylame.jem.core.Part;
import pw.phylame.jem.formats.util.Texts;
import pw.phylame.jem.util.JemException;
import pw.phylame.tools.TextObject;

import java.io.*;
import java.util.Map;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

/**
 * <tt>Maker</tt> implement for JAR book.
 */
public class JarMaker implements Maker {

    /** Java ME book template */
    public static final String JAR_TEMPLATE = "book.jar";

    // for generating entry name
    int chapterCount = 1;

    @Override
    public String getName() {
        return "jar";
    }

    @Override
    public void make(Book book, File file, Map<String, Object> kw) throws IOException, JemException {
        OutputStream stream = new BufferedOutputStream(new FileOutputStream(file));
        ZipOutputStream zipout = new ZipOutputStream(stream);
        zipout.setComment("Generated by Jem "+ Jem.VERSION);
        make(book, zipout);
        zipout.close();
    }

    public void make(Book book, ZipOutputStream zipout) throws IOException {
        // template
        copyTemplate(zipout);
        // MANIFEST
        zipout.putNextEntry(new ZipEntry(JAR.MF_FILE));
        String mf = String.format(JAR.MF_TEMPLATE, "Jem", Jem.VERSION, book.getTitle(),
                "PW", book.getTitle());
        zipout.write(mf.getBytes(JAR.META_ENCODING));
        zipout.closeEntry();
        // contents
        List<Item> items = new java.util.ArrayList<Item>();
        for (Part sub: book) {
            writeChapter(sub, zipout, items);
        }
        // navigation
        writeMeta(book, zipout, items);
    }

    private void copyTemplate(ZipOutputStream zipout) throws IOException {
        InputStream stream = JarMaker.class.getResourceAsStream(JAR_TEMPLATE);
        if (stream == null) {
            throw new IOException("Not found JAR template");
        }
        ZipInputStream zipin = new ZipInputStream(new BufferedInputStream(stream));
        ZipEntry entry;
        while ((entry = zipin.getNextEntry()) != null) {
            zipout.putNextEntry(new ZipEntry(entry.getName()));
            org.apache.commons.io.IOUtils.copy(zipin, zipout);
            zipin.closeEntry();
            zipout.closeEntry();
        }
        zipin.close();
        stream.close();
    }

    private void writeChapter(Part part, ZipOutputStream zipout, List<Item> items) throws IOException {
        String text;
        if (part.isSection()) {
            text = part.getTitle();
        } else {
            text = Texts.plainText(part.getSource());
        }
        String name = String.valueOf(chapterCount++);
        zipout.putNextEntry(new ZipEntry(name));
        byte[] b = text.getBytes(JAR.TEXT_ENCODING);
        zipout.write(b);
        zipout.closeEntry();

        items.add(new Item(name, b.length+2, part.getTitle()));

        for (Part sub: part) {
            writeChapter(sub, zipout, items);
        }
    }

    private void writeMeta(Book book, ZipOutputStream zipout, List<Item> items) throws IOException {
        zipout.putNextEntry(new ZipEntry("0"));
        DataOutput output = new DataOutputStream(zipout);
        output.writeInt(JAR.FILE_HEADER);
        byte[] b = book.getTitle().getBytes(JAR.META_ENCODING);
        output.writeByte(b.length);
        output.write(b);

        b = String.valueOf(items.size()).getBytes(JAR.META_ENCODING);
        output.writeShort(b.length);
        output.write(b);

        for (Item item: items) {
            String str = item.name+","+item.size+","+item.title;
            b = str.getBytes(JAR.META_ENCODING);
            output.writeShort(b.length);
            output.write(b);
        }
        output.writeShort(0);  // what?
        StringBuilder sb = new StringBuilder(book.getTitle());
        TextObject intro = book.getIntro();
        if (intro != null) {
            List<String> lines = Texts.plainLines(intro);
            for (String line : lines) {
                sb.append(line).append("\n");
            }
        }
        b = sb.toString().getBytes(JAR.META_ENCODING);
        output.writeShort(b.length);
        output.write(b);
        zipout.closeEntry();
    }

    static class Item {
        public String name;
        public int size;
        public String title;

        public Item(String name, int size, String title) {
            this.name = name;
            this.size = size;
            this.title = title;
        }
    }
}
