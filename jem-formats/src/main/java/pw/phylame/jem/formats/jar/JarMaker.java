/*
 * Copyright 2014-2015 Peng Wan <phylame@163.com>
 *
 * This file is part of Jem.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package pw.phylame.jem.formats.jar;

import pw.phylame.jem.core.Book;
import pw.phylame.jem.core.Jem;
import pw.phylame.jem.core.Maker;
import pw.phylame.jem.core.Part;
import pw.phylame.jem.util.JemException;
import pw.phylame.tools.TextObject;
import pw.phylame.tools.file.FileUtils;

import java.io.*;
import java.util.List;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarOutputStream;

/**
 * <tt>Maker</tt> implement for JAR book.
 */
public class JarMaker implements Maker {

    int chapterCount = 1;

    @Override
    public String getName() {
        return "jar";
    }

    private void copyTemplate(File output) throws IOException {
        InputStream in = Maker.class.getResourceAsStream("/res/book.jar");
        if (in == null) {
            throw new IOException("Not found JAR template");
        }
        OutputStream os = new FileOutputStream(output);
        FileUtils.copy(in, os, -1);
        in.close();
        os.close();
    }

    @Override
    public void make(Book book, File file, Map<String, Object> kw) throws IOException, JemException {
        copyTemplate(file);
        OutputStream output = new FileOutputStream(file, true);
        JarOutputStream jarOut = new JarOutputStream(output);
        jarOut.setComment("Generated by Jem "+ Jem.VERSION);
        make(book, jarOut);
        jarOut.close();
    }

    public void make(Book book, JarOutputStream jarOut) throws IOException {
        jarOut.putNextEntry(new JarEntry(Jar.MF_FILE));
        String mf = String.format(Jar.MF_TEMPLATE, "Jem", Jem.VERSION, book.getTitle(),
                "PW", book.getTitle());
        jarOut.write(mf.getBytes(Jar.META_ENCODING));
        jarOut.closeEntry();
        List<Item> items = new java.util.ArrayList<Item>();
        for (Part sub: book) {
            writeChapter(sub, jarOut, items);
        }
        writeMeta(book, jarOut, items);
    }

    private void writeChapter(Part part, JarOutputStream jarOut, List<Item> items) throws IOException {
        String text;
        if (part.isSection()) {
            text = part.getTitle();
        } else {
            text = part.getText();
        }
        String name = String.valueOf(chapterCount++);
        jarOut.putNextEntry(new JarEntry(name));
        byte[] b = text.getBytes(Jar.TEXT_ENCODING);
        jarOut.write(b);
        jarOut.closeEntry();
        items.add(new Item(name, b.length+2, part.getTitle()));

        for (Part sub: part) {
            writeChapter(sub, jarOut, items);
        }
    }

    private void writeMeta(Book book, JarOutputStream jarOut, List<Item> items) throws IOException {
        jarOut.putNextEntry(new JarEntry("0"));
        DataOutput out = new DataOutputStream(new BufferedOutputStream(jarOut));
        out.writeInt(Jar.FILE_HEADER);
        byte[] b = book.getTitle().getBytes(Jar.META_ENCODING);
        out.writeByte(b.length);
        out.write(b);

        b = String.valueOf(items.size()).getBytes(Jar.META_ENCODING);
        out.writeShort(b.length);
        out.write(b);

        for (Item item: items) {
            String str = item.name+","+item.size+","+item.title;
            b = str.getBytes(Jar.META_ENCODING);
            out.writeShort(b.length);
            out.write(b);
        }
        out.writeShort(0);  // what?
        StringBuilder sb = new StringBuilder(book.getTitle());
        TextObject intro = book.getIntro();
        if (intro != null) {
            String[] lines = intro.getLines(false);
            for (String line : lines) {
                sb.append(line).append("\n");
            }
        }
        b = sb.toString().getBytes(Jar.META_ENCODING);
        out.writeShort(b.length);
        out.write(b);
        jarOut.closeEntry();
    }

    static class Item {
        public String name;
        public int size;
        public String title;

        public Item(String name, int size, String title) {
            this.name = name;
            this.size = size;
            this.title = title;
        }
    }
}
